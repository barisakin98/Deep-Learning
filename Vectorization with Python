# -*- coding: utf-8 -*-
"""
@author: NeuroPanda
"""
import numpy as np
import time
##Vectorization 
a=np.random.rand(1000000)
b=np.random.rand(1000000)

tic=time.time() #şuanki zamanı alıyoruz.
c=np.dot(a,b)
toc=time.time() #işlem bittiğindeki zamanı alıyoruz.

print("VEKTÖRİZE HALİ: "+str(1000*(toc-tic))+"ms")
print(type(c))
##NON-Vectorization
c=0
tic=time.time()
for i in range(1000000): #vektörlerimiz kaç elemanlıysa o kadar işlem yapacağız.
    c+=a[i]*b[i]
print(type(c))
toc=time.time()
print("NON-VEKTÖRİZE HALİ: ",str(1000*(toc-tic))+"ms")


"""Burada dikkat edilmesi gereken bir nokta var.  a ve b vektörlerine baktığımızda 
(1000000,) şeklinde çıkmaktadır.  Bu pythona özgü bir durumdur. Tek boyutlu bu tip vektörler
daha sonra yazacağımız Neural Network uygulamalarında bize zorluk çıkaracaktır. O yüzden bu tek boyutlu
a vektörünü reshape methodu ile normale çevirebiliriz. veya a yı tanımlarken a=np.random.rand(1000000,1) diyebiliriz.
!! 
A vektörü tek boyutlu haldeyken kendisi gibi bir vektörle çarpılırsa bir matris sonucu değil sayı sonucu verir.
bundan kurtulmak ve iki matris çarpımı elde edebilmek için yukarıdaki methodlarla kendisini normal bir matris vektörüne
çevirmemiz gereklidir."""
